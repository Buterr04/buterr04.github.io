"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[4099],{6566:(a,n)=>{n.A=(a,n)=>{const e=a.__vccOpts||a;for(const[a,s]of n)e[a]=s;return e}},6375:(a,n,e)=>{e.r(n),e.d(n,{comp:()=>t,data:()=>i});var s=e(5916);const p=[(0,s.Fv)('<h1 id="循环" tabindex="-1"><a class="header-anchor" href="#循环"><span>循环</span></a></h1><h2 id="for循环" tabindex="-1"><a class="header-anchor" href="#for循环"><span>for循环</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">for</span><span class="token punctuation">(</span>表达式<span class="token number">1</span>；表达式<span class="token number">2</span>；表达式<span class="token number">3</span><span class="token punctuation">)</span> \n<span class="token punctuation">{</span>\n\t语句\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它的执行过程如下</p><p><strong>(1)</strong> 先求解表达式1</p><p><strong>(2)</strong> <strong>求解表达式2</strong>，若其值为真(值为非0)，则执行for语句中指定的内嵌语句，然后执行下面<strong>第(3)步</strong>。若为假(值为0)，则结束循环，转到<strong>第(5)步</strong></p><p><strong>(3)</strong> 求解<strong>表达式3</strong></p><p><strong>(4)</strong> 转回上面<strong>第(2)步</strong>继续执行</p><p><strong>(5)</strong> 循环结束</p><p><code>for(循环变量赋初值；循环条件；循环变量增值)</code></p><hr><h1 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h1><h2 id="定义一个一维数组" tabindex="-1"><a class="header-anchor" href="#定义一个一维数组"><span>定义一个一维数组</span></a></h2><p><code>a[10]</code> 数组名a，有10个元素</p><p>表示形式：<code>数组名[下标]</code> <mark>下标从0开始</mark></p><h3 id="初始化赋值" tabindex="-1"><a class="header-anchor" href="#初始化赋值"><span>初始化赋值</span></a></h3><ul><li><p>对数组元素进行初始化赋值：<code>int a [5] = {0, 1, 2, 3, 4};</code></p><ul><li>初始化之后：<code>a [0] = 0, a [1] = 1 以此类推</code></li></ul></li><li><p>初始化时可以全赋值，之后只能引用赋值</p></li><li><p>初始化时可以只赋值一部分，未赋值的元素为0</p></li><li><p>对全部元素初始赋值时可以省略：<code>a[]={0, 1, 2, 3, 4}</code> ，系统会自动分配下标为5，但之后的元素不可省略</p></li></ul><p><mark>定义数组下标必须使用常量，引用数组时下标可以是变量，表达式</mark></p><h2 id="定义一个二维数组" tabindex="-1"><a class="header-anchor" href="#定义一个二维数组"><span>定义一个二维数组</span></a></h2><p><code>数组名［常量表达式1］［常量表达式2］</code></p><p>可看作一个特殊的一维数组：1*2的数组？</p><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h3><ul><li>类似一维数组</li><li><code> int a［3］［4］={{1}，{5}，{9}};</code></li><li>也可以部分赋值</li></ul><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意</span></a></h3><ol><li>数组要初始化</li></ol><h2 id="字符数组" tabindex="-1"><a class="header-anchor" href="#字符数组"><span>字符数组</span></a></h2><p><code>char c [10]{&#39;w&#39;,&#39;ee&#39;};</code></p><p>用于存放字符，也可以用<code>int</code>来存储，但是浪费空间</p><p>初始化类似，但缺少的部分自动补全为<code>\\0</code></p><p>使用<code>%c</code>输入输出</p><h3 id="定义成字符串" tabindex="-1"><a class="header-anchor" href="#定义成字符串"><span>定义成字符串</span></a></h3><p>则用<code>%s</code>输出，遇到0结束</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;china&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遇到0结束</p><h3 id="输入输出" tabindex="-1"><a class="header-anchor" href="#输入输出"><span>输入输出</span></a></h3><p><code>printf(&quot;%s&quot;,&amp;c[0]);</code></p><p>输入字符串时，保留多一位给<code>\\0</code></p><h4 id="如果包含空格" tabindex="-1"><a class="header-anchor" href="#如果包含空格"><span>如果包含空格</span></a></h4><p>只会输入空格之前的内容，若要输入包含空格只能定义多个字符串</p><h4 id="输入" tabindex="-1"><a class="header-anchor" href="#输入"><span>输入</span></a></h4><p>输入项为字符组名时，不需要加入地址符&amp;</p><p><code>scanf(“%s”, Str);</code></p><h4 id="使用字符串处理函数-有string-h头文件" tabindex="-1"><a class="header-anchor" href="#使用字符串处理函数-有string-h头文件"><span>使用字符串处理函数（有string.h头文件）</span></a></h4><ul><li><p><code>puts(字符数组)</code>其结果是输出数组，输出完毕后会增加换行（将\\0变为\\n）</p></li><li><p><code>gets(字符数组)</code>字符数=输入字符数量+1</p></li><li><p><code>strcat(str1,str2)</code>字符串连接，将str2连接到str1之后</p></li><li><p><code>strcpy(str1,str2);</code>将两个数组内容复制，只能通过内存拷贝</p></li><li><p><code>strcmp(str1,str2);</code>两个数组比较ascii码的值，从左到右，直到不同的字符或者\\0为止</p><p>若1&gt;2,则函数值为正整数，1&lt;2，为负整数，以第一个不同的字符为准</p></li><li><p><code>strlen(str)</code>测试字符串的长度，<mark>不包括\\0在内</mark></p></li><li><p><code>strlwr</code>：转小写 <code>strupr</code>：转大写</p></li></ul><hr><h1 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h1><h2 id="定义函数" tabindex="-1"><a class="header-anchor" href="#定义函数"><span>定义函数</span></a></h2><ul><li><p>函数分为有参和无参</p><ul><li>有参是指函数与其他函数之间存在数据传递</li><li>无参是指该函数并没有数据传递,一般只用于执行一组操作,可以带回或不带回函数值</li></ul></li><li><p>有函数参数的一般形式</p></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>类型标识符 函数名<span class="token punctuation">(</span>形式参数表列<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t声明部分\n\t语句\n<span class="token punctuation">}</span>\n\n例<span class="token operator">:</span>\n<span class="token keyword">int</span> max（<span class="token keyword">int</span> x，<span class="token keyword">int</span> y）\n\t<span class="token punctuation">{</span>\n\t \t<span class="token keyword">int</span>  z<span class="token punctuation">;</span>\t\t     <span class="token comment">//函数体中的声明部分</span>\n\t\tz <span class="token operator">=</span> x＞y？x <span class="token operator">:</span> y <span class="token punctuation">;</span>\n      \t<span class="token keyword">return</span>  z；\n\t<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以有“空函数”</li><li>如果用 <code>void</code> 定义函数,那么这个函数将没有返回值(定义为空类型)</li></ul><h2 id="调用函数" tabindex="-1"><a class="header-anchor" href="#调用函数"><span>调用函数</span></a></h2><ul><li>将函数调用作为一个语句</li><li>将函数放到表达式中</li><li>调用作为一个函数实参</li><li>被调用函数定义写在前面,那么主函数中不需要再写函数声明,如果定义写在后面则需要提前书写函数声明</li></ul><h2 id="函数调用时的数据传递" tabindex="-1"><a class="header-anchor" href="#函数调用时的数据传递"><span>函数调用时的数据传递</span></a></h2><h3 id="形式参数和实际参数" tabindex="-1"><a class="header-anchor" href="#形式参数和实际参数"><span>形式参数和实际参数</span></a></h3><p>实际参数:实实在在确定的值,存在的</p><p>只有发生函数调用时,函数中的形参才被分配内存单元</p><p>实参可以是常量,变量或者表达式,但实参要有具体的值</p><p>实参与形参的类型相同或赋值相容</p><p>实参变量对形参变量的数据传递都是“直传递”,相当于拷贝的过程 <mark>只能由实参传给形参</mark></p><h3 id="函数的嵌套调用" tabindex="-1"><a class="header-anchor" href="#函数的嵌套调用"><span>函数的嵌套调用</span></a></h3><p>函数定义互相平行,可以嵌套调用</p><h3 id="递归调用" tabindex="-1"><a class="header-anchor" href="#递归调用"><span>递归调用</span></a></h3><p>调用函数的过程中又直接或者间接调用该函数本身,称之为递归调用</p><h3 id="数组作为函数的参数" tabindex="-1"><a class="header-anchor" href="#数组作为函数的参数"><span>数组作为函数的参数</span></a></h3><p>可以用数组名作为函数的参数,此时实参和形参都应该用数组名</p><p>应该在主调函数和被调用函数中分别定义数组,同时实参和形参数组形式应该一致,否则可能出错</p><h1 id="指针" tabindex="-1"><a class="header-anchor" href="#指针"><span>指针</span></a></h1><h2 id="关于指针" tabindex="-1"><a class="header-anchor" href="#关于指针"><span>关于指针</span></a></h2><p>指针是一个值为内存地址的变量</p><p>一个变量的地址称为该变量的指针</p><p>指针变量实际情况下不知道实际整数值</p><p>有两种引用方式，使用变量本身或者使用该变量的指针</p><h2 id="定义指针" tabindex="-1"><a class="header-anchor" href="#定义指针"><span>定义指针</span></a></h2><p><code>类型名 *指针变量名</code> <strong>保存地址类型相同，但是指向的类型不同</strong></p><h2 id="赋值语句运算符" tabindex="-1"><a class="header-anchor" href="#赋值语句运算符"><span>赋值语句运算符</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>pooh<span class="token punctuation">;</span> <span class="token comment">// 把pooh的地址赋给ptr</span>\nptr <span class="token operator">=</span> <span class="token operator">&amp;</span>bah<span class="token punctuation">;</span> <span class="token comment">// 把ptr指向bah，而不是pooh</span>\nval <span class="token operator">=</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token comment">// 找出ptr指向的值</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>bah<span class="token punctuation">;</span>\nval <span class="token operator">=</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>\n相当于\tval <span class="token operator">=</span> bah<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="声明指针" tabindex="-1"><a class="header-anchor" href="#声明指针"><span>声明指针</span></a></h2><p>声明指针变量时必须指定指针所指向变量的类型，因为不同的变量类型占用不同的存储空间</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token operator">*</span> pi<span class="token punctuation">;</span>   <span class="token comment">// pi是指向int类型变量的指针</span>\n<span class="token keyword">char</span> <span class="token operator">*</span> pc<span class="token punctuation">;</span>    <span class="token comment">// pc是指向char类型变量的指针</span>\n<span class="token keyword">float</span> <span class="token operator">*</span> pf<span class="token punctuation">,</span> <span class="token operator">*</span> pg<span class="token punctuation">;</span> <span class="token comment">// pf、pg都是指向float类型变量的指针</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注意-1" tabindex="-1"><a class="header-anchor" href="#注意-1"><span>注意</span></a></h3><p>指针变量前面的<code>*</code>表示该变量的类型为指针变量，变量名不包括<code>*</code></p><p>定义指针变量时必须指定基类型</p><p>指针变量之中只能存放地址，不能存放其他数据（虽然一般用不到，除非非常清楚内存地址，不然不会定义）</p><h2 id="指针变量的引用" tabindex="-1"><a class="header-anchor" href="#指针变量的引用"><span>指针变量的引用</span></a></h2><ol><li>给指针变量赋值</li><li>引用指针变量指向的变量</li><li>引用指针变量的值</li></ol><p>使用指针可以在不破坏变量原始值的前提下相互交换，比如在排序的时候可以使用指针，同时不破坏原来的输入</p><p>（使用其他的方式来引用）</p><h2 id="指针引用数组" tabindex="-1"><a class="header-anchor" href="#指针引用数组"><span>指针引用数组</span></a></h2><p>数组的指针就是该数组的地址</p><h3 id="指针的运算" tabindex="-1"><a class="header-anchor" href="#指针的运算"><span>指针的运算</span></a></h3><p>p指向数组的一个元素，p+1指向下一个元素（并非将p的值简单的相加）</p><p>p的初始值是&amp;a[0]，则p+i和a+i是a[i]的地址</p><p>(p+i)或(a+i)是p+i或a+i所指向的数组元素，即a[i]</p><p>如果指针p和q都是指向同一数组，则执行q-p的结果是：地址q-地址p的差除以数组元素的长度</p><h2 id="指向函数的指针" tabindex="-1"><a class="header-anchor" href="#指向函数的指针"><span>指向函数的指针</span></a></h2><p>函数指针的数据类型<code>int(*p)(int,int);</code></p><p>定义函数类型的指针，定义函数之后调用时增加括号</p><p><code>p = max; </code></p><p><code>int a = max(b,c); </code></p><p><code>int a = (*p)(b,c);</code></p><p>函数可以作为另一个函数的参数传递</p><h1 id="结构体变量" tabindex="-1"><a class="header-anchor" href="#结构体变量"><span>结构体变量</span></a></h1><h2 id="一般形式" tabindex="-1"><a class="header-anchor" href="#一般形式"><span>一般形式</span></a></h2><h3 id="结构体的声明" tabindex="-1"><a class="header-anchor" href="#结构体的声明"><span>结构体的声明</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> 结构体名\n<span class="token punctuation">{</span>\n类型名 成员名<span class="token number">1</span>；\n类型名 成员名<span class="token number">2</span>；\n<span class="token punctuation">}</span>；\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="引用结构体变量中成员的方式为" tabindex="-1"><a class="header-anchor" href="#引用结构体变量中成员的方式为"><span>引用结构体变量中成员的方式为</span></a></h3><p><code>结构体变量名.成员名</code></p><p>数组所占内存变大</p><p>结构体数组初始化与其他类型数组一样，可以直接初始化</p><h3 id="声明新类型名" tabindex="-1"><a class="header-anchor" href="#声明新类型名"><span>声明新类型名</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">typedef</span>　<span class="token keyword">struct</span>\n<span class="token punctuation">{</span>\n\t<span class="token keyword">int</span>　month<span class="token punctuation">;</span>\n\t<span class="token keyword">int</span>　day<span class="token punctuation">;</span>\n\t<span class="token keyword">int</span>　year<span class="token punctuation">;</span>\n <span class="token punctuation">}</span> DATE；\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表示声明新类型名DATE，它代表上面指定的一个结构体类型。这时就可以用DATE定义变量：</p><p>DATE birthday；</p><p>DATE　*p；</p><h2 id="链表" tabindex="-1"><a class="header-anchor" href="#链表"><span>链表</span></a></h2><p>根据数据开辟内存地址，避免浪费空间</p><p>可以在结构体最后加入指针</p>',118)],l={},t=(0,e(6566).A)(l,[["render",function(a,n){return(0,s.uX)(),(0,s.CE)("div",null,p)}]]),i=JSON.parse('{"path":"/apps/C.html","title":"循环","lang":"zh-CN","frontmatter":{"description":"循环 for循环 它的执行过程如下 (1) 先求解表达式1 (2) 求解表达式2，若其值为真(值为非0)，则执行for语句中指定的内嵌语句，然后执行下面第(3)步。若为假(值为0)，则结束循环，转到第(5)步 (3) 求解表达式3 (4) 转回上面第(2)步继续执行 (5) 循环结束 for(循环变量赋初值；循环条件；循环变量增值) 数组 定义一个一维...","head":[["meta",{"property":"og:url","content":"https://newzone.top/apps/C.html"}],["meta",{"property":"og:site_name","content":"Buterr的blog"}],["meta",{"property":"og:title","content":"循环"}],["meta",{"property":"og:description","content":"循环 for循环 它的执行过程如下 (1) 先求解表达式1 (2) 求解表达式2，若其值为真(值为非0)，则执行for语句中指定的内嵌语句，然后执行下面第(3)步。若为假(值为0)，则结束循环，转到第(5)步 (3) 求解表达式3 (4) 转回上面第(2)步继续执行 (5) 循环结束 for(循环变量赋初值；循环条件；循环变量增值) 数组 定义一个一维..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-10T01:27:34.000Z"}],["meta",{"property":"article:author","content":"LearnData"}],["meta",{"property":"article:modified_time","content":"2025-07-10T01:27:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"循环\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-10T01:27:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LearnData\\",\\"url\\":\\"https://newzone.top\\"}]}"]]},"headers":[{"level":2,"title":"for循环","slug":"for循环","link":"#for循环","children":[]},{"level":2,"title":"定义一个一维数组","slug":"定义一个一维数组","link":"#定义一个一维数组","children":[{"level":3,"title":"初始化赋值","slug":"初始化赋值","link":"#初始化赋值","children":[]}]},{"level":2,"title":"定义一个二维数组","slug":"定义一个二维数组","link":"#定义一个二维数组","children":[{"level":3,"title":"初始化","slug":"初始化","link":"#初始化","children":[]},{"level":3,"title":"注意","slug":"注意","link":"#注意","children":[]}]},{"level":2,"title":"字符数组","slug":"字符数组","link":"#字符数组","children":[{"level":3,"title":"定义成字符串","slug":"定义成字符串","link":"#定义成字符串","children":[]},{"level":3,"title":"输入输出","slug":"输入输出","link":"#输入输出","children":[]}]},{"level":2,"title":"定义函数","slug":"定义函数","link":"#定义函数","children":[]},{"level":2,"title":"调用函数","slug":"调用函数","link":"#调用函数","children":[]},{"level":2,"title":"函数调用时的数据传递","slug":"函数调用时的数据传递","link":"#函数调用时的数据传递","children":[{"level":3,"title":"形式参数和实际参数","slug":"形式参数和实际参数","link":"#形式参数和实际参数","children":[]},{"level":3,"title":"函数的嵌套调用","slug":"函数的嵌套调用","link":"#函数的嵌套调用","children":[]},{"level":3,"title":"递归调用","slug":"递归调用","link":"#递归调用","children":[]},{"level":3,"title":"数组作为函数的参数","slug":"数组作为函数的参数","link":"#数组作为函数的参数","children":[]}]},{"level":2,"title":"关于指针","slug":"关于指针","link":"#关于指针","children":[]},{"level":2,"title":"定义指针","slug":"定义指针","link":"#定义指针","children":[]},{"level":2,"title":"赋值语句运算符","slug":"赋值语句运算符","link":"#赋值语句运算符","children":[]},{"level":2,"title":"声明指针","slug":"声明指针","link":"#声明指针","children":[{"level":3,"title":"注意","slug":"注意-1","link":"#注意-1","children":[]}]},{"level":2,"title":"指针变量的引用","slug":"指针变量的引用","link":"#指针变量的引用","children":[]},{"level":2,"title":"指针引用数组","slug":"指针引用数组","link":"#指针引用数组","children":[{"level":3,"title":"指针的运算","slug":"指针的运算","link":"#指针的运算","children":[]}]},{"level":2,"title":"指向函数的指针","slug":"指向函数的指针","link":"#指向函数的指针","children":[]},{"level":2,"title":"一般形式","slug":"一般形式","link":"#一般形式","children":[{"level":3,"title":"结构体的声明","slug":"结构体的声明","link":"#结构体的声明","children":[]},{"level":3,"title":"引用结构体变量中成员的方式为","slug":"引用结构体变量中成员的方式为","link":"#引用结构体变量中成员的方式为","children":[]},{"level":3,"title":"声明新类型名","slug":"声明新类型名","link":"#声明新类型名","children":[]}]},{"level":2,"title":"链表","slug":"链表","link":"#链表","children":[]}],"git":{"createdTime":1752110854000,"updatedTime":1752110854000,"contributors":[{"name":"Buterr.","email":"122344168+Buterr04@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.76,"words":2027},"filePathRelative":"apps/C.md","localizedDate":"2025年7月10日","excerpt":"\\n<h2>for循环</h2>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span>表达式<span class=\\"token number\\">1</span>；表达式<span class=\\"token number\\">2</span>；表达式<span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span> \\n<span class=\\"token punctuation\\">{</span>\\n\\t语句\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}')}}]);