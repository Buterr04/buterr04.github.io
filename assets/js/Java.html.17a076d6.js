"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[260],{6566:(p,e)=>{e.A=(p,e)=>{const t=p.__vccOpts||p;for(const[p,a]of e)t[p]=a;return t}},3212:(p,e,t)=>{t.r(e),t.d(e,{comp:()=>i,data:()=>c});var a=t(5916);const n=[(0,a.Fv)('<h1 id="结构化程序设计" tabindex="-1"><a class="header-anchor" href="#结构化程序设计"><span>结构化程序设计</span></a></h1><p>标识符：$</p><p>首字母不得是数字，区分大小写</p><p>除去关键字</p><p>（字母，数字，下划线，美元符号$）</p><p><code>public static void main{}</code> main方法</p><p><code>System.out.println</code></p><p>Public 本包均能访问</p><p>protected 当前类的子类</p><p>private 本类访问</p><p>默认 本</p><p>static 静态方法</p><p>class 类</p><h3 id="直接量" tabindex="-1"><a class="header-anchor" href="#直接量"><span>直接量</span></a></h3><p>布尔：boolean</p><p>String字符串，null，基本数据</p><p>long：34L</p><p>float：1.5F</p><p>char</p><p>int</p><p>转义字符</p><h3 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h3><p>类型转换：自动：低级到高级</p><p>目标类型 变量=(目标类型) 值</p><h3 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h3><p><code>Math.pow(2.0,3.0);</code> $2.0^{3.0}$</p><p><code>7/5</code>=$7 div5$</p><p><code>7%5</code>=$7mod5$ 也可对浮点数运算，运算结果符号与第一个操作符的符号相同</p><h4 id="布尔型" tabindex="-1"><a class="header-anchor" href="#布尔型"><span>布尔型</span></a></h4><p>&amp; AND | OR ^ XOR ! NOT</p><p>条件</p><p>&amp;&amp; AND || OR</p><h4 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符"><span>位运算符</span></a></h4><p>&lt;&lt; 左移</p><p>&gt;&gt; 右移</p><p>&gt;&gt;&gt; 无符号右移</p><p>写成二进制形式然后按位操作产生一个新的数</p><p>instanceof</p><p>new</p><p><code>(Cond ? express1 : express2)</code></p><h1 id="面向对象程序设计" tabindex="-1"><a class="header-anchor" href="#面向对象程序设计"><span>面向对象程序设计</span></a></h1><p>行为方法功能等封装成类（classes）：具有共同特征的数据等</p><p>对象（objects）：类的实例</p><p>具有封装性，继承性，多态性</p><p>基本思想：构建和组织对象解决问题</p><h3 id="class" tabindex="-1"><a class="header-anchor" href="#class"><span>class</span></a></h3><p>是实例对象的模版</p><p>基本组成：域和方法</p><p>修饰词 class 类名称 extends父类名 implements接口名</p><p>类修饰词：public 可被所有Java软件包使用</p><p>abstract 抽象类</p><p>final 最终类，不能被继承</p><p>strictfp 浮点运算</p><p>default 只能在当前包内使用</p><h5 id="成员域" tabindex="-1"><a class="header-anchor" href="#成员域"><span>成员域</span></a></h5><p>表示和存储类所需要的数据</p><p>域修饰词 类型 变量名或带初始化的变量名列表</p><p>类型：当前成员域的类型 包括基本数据类型和引用数据类型</p><p>方法修饰词 返回类型 方法名</p><p>返回类型：返回数据的类型</p><p>方法名：标识符</p><p>参数列表：，分割</p><p>方法修饰词：<code>public protected private abstract static final synchronized strictfp</code></p><h5 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法"><span>构造方法</span></a></h5><p>创建类的实例对象</p><p>同时完成初始化</p><p>默认构造方法：不含任何参数</p><p>0 bool false</p><p>格式</p><p>【修饰词】类名称（参数）</p><p>{</p><p>方法体</p><p>​ }</p><p>定义顺序：成员域 构造方法 成员方法</p><p>引用数据类型变量：四个基本属性：变量名，数据类型，变量值和存储单元</p><p>Java不允许有多重继承：有多个父类</p><p>类型转换</p><p>隐式 子类型——&gt;父类型 不用强制转换符（）</p><p>显式 父类型——&gt;子类型 需要用强制转换符</p><p>instanceof 判断一个引用类型表达式所指向的实例对象是否是某引用类型的实例对象</p><p>多态性：在类定义里出现多个构造方法或出现多个同名的成员方法。</p><p>重载：同一个类中的同名方法在功能上的重载</p><p>覆盖：子类和父类类体中均定义了具有相同声明的非静态成员方法，称为对父类的覆盖</p><p>super 调用父类型被覆盖的成员方法</p><p>this 当前类的对象</p><p>package 创建包</p><p>import 导入包</p><p>java.lang java.math</p><p>String.valueOf() 转换为字符串</p><p>迭代器</p><p>Java.util.Iterator 判断迭代器下一个位置上是否还有元素</p><h3 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举"><span>枚举</span></a></h3><p>修饰词只能是public，或者默认值</p><p>不能通过new运算符</p><p>常用：switch语句，采用枚举常量标识符</p>',95)],r={},i=(0,t(6566).A)(r,[["render",function(p,e){return(0,a.uX)(),(0,a.CE)("div",null,n)}]]),c=JSON.parse('{"path":"/notes/Java.html","title":"Java高级语言程序设计 笔记📒","lang":"zh-CN","frontmatter":{"title":"Java高级语言程序设计 笔记📒","icon":null,"order":-1,"article":false,"author":"Buterr","date":"2024-06-02T00:00:00.000Z","category":["学习笔记"],"tag":["Java","程序设计"],"sticky":true,"star":true,"footer":"BUPT2024春季课程","copyright":"Buterr","description":"结构化程序设计 标识符：$ 首字母不得是数字，区分大小写 除去关键字 （字母，数字，下划线，美元符号$） public static void main{} main方法 System.out.println Public 本包均能访问 protected 当前类的子类 private 本类访问 默认 本 static 静态方法 class 类 直接量...","head":[["meta",{"property":"og:url","content":"https://newzone.top/notes/Java.html"}],["meta",{"property":"og:site_name","content":"Buterr的blog"}],["meta",{"property":"og:title","content":"Java高级语言程序设计 笔记📒"}],["meta",{"property":"og:description","content":"结构化程序设计 标识符：$ 首字母不得是数字，区分大小写 除去关键字 （字母，数字，下划线，美元符号$） public static void main{} main方法 System.out.println Public 本包均能访问 protected 当前类的子类 private 本类访问 默认 本 static 静态方法 class 类 直接量..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-26T05:09:29.000Z"}],["meta",{"property":"article:author","content":"Buterr"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"程序设计"}],["meta",{"property":"article:published_time","content":"2024-06-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-26T05:09:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Java高级语言程序设计 笔记📒\\",\\"description\\":\\"结构化程序设计 标识符：$ 首字母不得是数字，区分大小写 除去关键字 （字母，数字，下划线，美元符号$） public static void main{} main方法 System.out.println Public 本包均能访问 protected 当前类的子类 private 本类访问 默认 本 static 静态方法 class 类 直接量...\\"}"]]},"headers":[{"level":3,"title":"直接量","slug":"直接量","link":"#直接量","children":[]},{"level":3,"title":"变量","slug":"变量","link":"#变量","children":[]},{"level":3,"title":"运算符","slug":"运算符","link":"#运算符","children":[]},{"level":3,"title":"class","slug":"class","link":"#class","children":[]},{"level":3,"title":"枚举","slug":"枚举","link":"#枚举","children":[]}],"git":{"createdTime":1752113101000,"updatedTime":1753506569000,"contributors":[{"name":"Buterr.","email":"122344168+Buterr04@users.noreply.github.com","commits":2}]},"readingTime":{"minutes":3.6,"words":1080},"filePathRelative":"notes/Java.md","localizedDate":"2024年6月2日","excerpt":"\\n<p>标识符：$</p>\\n<p>首字母不得是数字，区分大小写</p>\\n<p>除去关键字</p>\\n<p>（字母，数字，下划线，美元符号$）</p>\\n<p><code>public static void main{}</code> main方法</p>\\n<p><code>System.out.println</code></p>\\n<p>Public 本包均能访问</p>\\n<p>protected 当前类的子类</p>\\n<p>private 本类访问</p>\\n<p>默认 本</p>\\n<p>static  静态方法</p>\\n<p>class   类</p>\\n<h3>直接量</h3>\\n<p>布尔：boolean</p>","autoDesc":true}')}}]);