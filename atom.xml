<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://newzone.top/atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
  <id>https://newzone.top/</id>
  <title>Buterr的blog</title>
  <subtitle>这里是Buterr的个人博客，记录学习和生活点滴</subtitle>
  <icon>https://newzone.top/favicon.ico</icon>
  <updated>2025-07-26T05:13:18.906Z</updated>
  <generator>@vuepress/plugin-feed</generator>
  <link rel="self" href="https://newzone.top/atom.xml"/>
  <link rel="alternate" href="https://newzone.top/"/>
  <category term="技术实践"/>
  <category term="学习笔记"/>
  <contributor>
    <name>Buterr</name>
  </contributor>
  <entry>
    <title type="text">Coze Studio 扣子开源项目本地部署</title>
    <id>https://newzone.top/projects/Coze.html</id>
    <link href="https://newzone.top/projects/Coze.html"/>
    <updated>2025-07-26T05:09:29.000Z</updated>
    <summary type="html"><![CDATA[
<blockquote>
<p>Coze Studio 扣子开源项目是一个基于 AI 的协同创作平台，旨在帮助用户更高效地进行内容创作和管理。Coze官方与2025.7.26日发布了Coze Studio的开源版本，支持本地部署。本文将实践如何在本地部署 Coze Studio 扣子开源项目。</p>
</blockquote>
<h2>1. 环境准备</h2>
<ul>
<li><strong>操作系统</strong>：macOS 15 Sequoia</li>
<li><strong>Docker</strong>：Docker Desktop for macOS</li>
</ul>]]></summary>
    <content type="html"><![CDATA[
<blockquote>
<p>Coze Studio 扣子开源项目是一个基于 AI 的协同创作平台，旨在帮助用户更高效地进行内容创作和管理。Coze官方与2025.7.26日发布了Coze Studio的开源版本，支持本地部署。本文将实践如何在本地部署 Coze Studio 扣子开源项目。</p>
</blockquote>
<h2>1. 环境准备</h2>
<ul>
<li><strong>操作系统</strong>：macOS 15 Sequoia</li>
<li><strong>Docker</strong>：Docker Desktop for macOS</li>
</ul>
<p>部署步骤：</p>
<ol>
<li>
<p>获取源码。</p>
<div class="language-Bash" data-ext="Bash" data-title="Bash"><pre class="language-Bash"><code># 克隆代码
git clone https://github.com/coze-dev/coze-studio.git
</code></pre></div></li>
<li>
<p>配置模型。</p>
<ol>
<li>
<p>从模板目录复制模型的模版文件，并粘贴到配置文件目录。</p>
<div class="language-Bash" data-ext="Bash" data-title="Bash"><pre class="language-Bash"><code># 模版文件目录
backend/conf/model/template/xxx.yaml
</code></pre></div><div class="language-Bash" data-ext="Bash" data-title="Bash"><pre class="language-Bash"><code># 配置文件目录
backend/conf/model/xxx.yaml
</code></pre></div></li>
<li>
<p>在配置文件目录下，修改模版文件。</p>
<ol>
<li>进入目录 <code>backend/conf/model</code>。打开复制后的文件<code>xxx.yaml</code>。</li>
<li>设置 <code>id</code>、<code>meta.conn_config.api_key</code>、<code>meta.conn_config.model</code> 字段，并保存文件。
<ul>
<li><strong>id</strong>：Coze Studio 中的模型 ID，由开发者自行定义，必须是非 0 的整数，且全局唯一。模型上线后请勿修改模型 id 。</li>
<li><strong>meta.conn_config.api_key</strong>：模型服务的 API Key。</li>
<li><strong>meta.conn_config.model</strong>：模型服务的 model ID。</li>
</ul>
</li>
</ol>
</li>
</ol>
</li>
<li>
<p>部署并启动服务。
首次部署并启动 Coze Studio 需要拉取镜像、构建本地镜像，可能耗时较久，请耐心等待。部署过程中，你会看到以下日志信息。如果看到提示 "Container coze-server Started"，表示 Coze Studio 服务已成功启动。</p>
<div class="language-Bash" data-ext="Bash" data-title="Bash"><pre class="language-Bash"><code># 启动服务
cd docker
cp .env.example .env
docker compose --profile '*' up -d
</code></pre></div></li>
</ol>
<p>注意：若本地已有SQL服务运行，可能会导致端口占用</p>
<ol start="4">
<li>访问 Coze Studio。
打开浏览器，访问 <code>http://localhost:8888</code>，即可进入 Coze Studio 的 Web 界面。</li>
</ol>
<p>项目中，部署使用了Google的Gemini免费API</p>
]]></content>
    <author>
      <name>Buterr</name>
    </author>
    <category term="技术实践"/>
    <contributor>
      <name>Buterr</name>
    </contributor>
    <published>2025-07-26T00:00:00.000Z</published>
    <rights>Buterr</rights>
  </entry>
  <entry>
    <title type="text">📦 数码产品进销存管理系统实践</title>
    <id>https://newzone.top/projects/Warehouse.html</id>
    <link href="https://newzone.top/projects/Warehouse.html"/>
    <updated>2025-07-26T05:09:29.000Z</updated>
    <summary type="html"><![CDATA[<hr>
<h2>🧭 一、项目背景</h2>
<p>在数码产品零售行业中，商品种类繁多、库存流转频繁、人工记录易错，管理难度极大。作为一家线下零售商，传统的手工管理方式已经难以满足日常运营的效率与准确性要求。因此，本项目旨在开发一套<strong>集采购、销售、库存管理于一体的进销存系统（WMS）</strong>，实现企业信息化转型，提升运营效率。</p>
<hr>
<h2>🏗️ 二、系统目标与核心设计理念</h2>
<p>系统目标明确：</p>
<ul>
<li>覆盖进销存全流程：采购申请→采购订单→入库→销售→出库→发货；</li>
<li>实现权限分离：支持管理员、销售员、库管员、采购员四类角色协同操作；</li>
<li>打造可视化、可维护、可扩展的轻量化管理平台。</li>
</ul>]]></summary>
    <author>
      <name>Buterr</name>
    </author>
    <category term="学习笔记"/>
    <contributor>
      <name>Buterr</name>
    </contributor>
    <published>2025-05-19T00:00:00.000Z</published>
    <rights>Buterr</rights>
  </entry>
  <entry>
    <title type="text">Redis（Remote Dictionary Server）</title>
    <id>https://newzone.top/tools/redis.html</id>
    <link href="https://newzone.top/tools/redis.html"/>
    <updated>2025-07-10T14:53:13.000Z</updated>
    <summary type="html"><![CDATA[
<blockquote>
<p>Redis是一个开源的内存数据库，遵守 BSD 协议，它提供了一个高性能的键值（key-value）存储系统，常用于缓存、消息队列、会话存储等应用场景。通常用于处理高并发操作</p>
</blockquote>
<h2>一、为什么选择 Redis？</h2>
<p>相比传统数据库或文件系统，Redis 有以下优势：</p>
<ul>
<li>🚀 <strong>超快的访问速度</strong>：所有数据存储于内存中，读写速度可达十万级 QPS。</li>
<li>📦 <strong>丰富的数据结构</strong>：支持字符串、列表、集合、有序集合、哈希等多种结构。</li>
<li>💾 <strong>支持持久化</strong>：通过 RDB、AOF 两种方式将内存快照保存到磁盘。</li>
<li>📡 <strong>内置高可用机制</strong>：支持主从复制、哨兵、集群部署。</li>
<li>🧠 <strong>广泛应用场景</strong>：从缓存到排行榜、分布式锁等，都能胜任。</li>
</ul>]]></summary>
    <content type="html"><![CDATA[
<blockquote>
<p>Redis是一个开源的内存数据库，遵守 BSD 协议，它提供了一个高性能的键值（key-value）存储系统，常用于缓存、消息队列、会话存储等应用场景。通常用于处理高并发操作</p>
</blockquote>
<h2>一、为什么选择 Redis？</h2>
<p>相比传统数据库或文件系统，Redis 有以下优势：</p>
<ul>
<li>🚀 <strong>超快的访问速度</strong>：所有数据存储于内存中，读写速度可达十万级 QPS。</li>
<li>📦 <strong>丰富的数据结构</strong>：支持字符串、列表、集合、有序集合、哈希等多种结构。</li>
<li>💾 <strong>支持持久化</strong>：通过 RDB、AOF 两种方式将内存快照保存到磁盘。</li>
<li>📡 <strong>内置高可用机制</strong>：支持主从复制、哨兵、集群部署。</li>
<li>🧠 <strong>广泛应用场景</strong>：从缓存到排行榜、分布式锁等，都能胜任。</li>
</ul>
]]></content>
    <published>2025-07-10T14:53:13.000Z</published>
  </entry>
</feed>