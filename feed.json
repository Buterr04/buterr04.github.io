{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Buterr的blog",
  "home_page_url": "https://newzone.top/",
  "feed_url": "https://newzone.top/feed.json",
  "description": "这里是Buterr的个人博客，记录学习和生活点滴",
  "favicon": "https://newzone.top/favicon.ico",
  "items": [
    {
      "title": "Coze Studio 扣子开源项目本地部署",
      "url": "https://newzone.top/projects/Coze.html",
      "id": "https://newzone.top/projects/Coze.html",
      "summary": "Coze Studio 扣子开源项目本地部署 Coze Studio 扣子开源项目是一个基于 AI 的协同创作平台，旨在帮助用户更高效地进行内容创作和管理。Coze官方与2025.7.26日发布了Coze Studio的开源版本，支持本地部署。本文将实践如何在本地部署 Coze Studio 扣子开源项目。 1. 环境准备 操作系统：macOS 15 ...",
      "content_html": "\n<blockquote>\n<p>Coze Studio 扣子开源项目是一个基于 AI 的协同创作平台，旨在帮助用户更高效地进行内容创作和管理。Coze官方与2025.7.26日发布了Coze Studio的开源版本，支持本地部署。本文将实践如何在本地部署 Coze Studio 扣子开源项目。</p>\n</blockquote>\n<h2>1. 环境准备</h2>\n<ul>\n<li><strong>操作系统</strong>：macOS 15 Sequoia</li>\n<li><strong>Docker</strong>：Docker Desktop for macOS</li>\n</ul>\n<p>部署步骤：</p>\n<ol>\n<li>\n<p>获取源码。</p>\n<div class=\"language-Bash\" data-ext=\"Bash\" data-title=\"Bash\"><pre class=\"language-Bash\"><code># 克隆代码\ngit clone https://github.com/coze-dev/coze-studio.git\n</code></pre></div></li>\n<li>\n<p>配置模型。</p>\n<ol>\n<li>\n<p>从模板目录复制模型的模版文件，并粘贴到配置文件目录。</p>\n<div class=\"language-Bash\" data-ext=\"Bash\" data-title=\"Bash\"><pre class=\"language-Bash\"><code># 模版文件目录\nbackend/conf/model/template/xxx.yaml\n</code></pre></div><div class=\"language-Bash\" data-ext=\"Bash\" data-title=\"Bash\"><pre class=\"language-Bash\"><code># 配置文件目录\nbackend/conf/model/xxx.yaml\n</code></pre></div></li>\n<li>\n<p>在配置文件目录下，修改模版文件。</p>\n<ol>\n<li>进入目录 <code>backend/conf/model</code>。打开复制后的文件<code>xxx.yaml</code>。</li>\n<li>设置 <code>id</code>、<code>meta.conn_config.api_key</code>、<code>meta.conn_config.model</code> 字段，并保存文件。\n<ul>\n<li><strong>id</strong>：Coze Studio 中的模型 ID，由开发者自行定义，必须是非 0 的整数，且全局唯一。模型上线后请勿修改模型 id 。</li>\n<li><strong>meta.conn_config.api_key</strong>：模型服务的 API Key。</li>\n<li><strong>meta.conn_config.model</strong>：模型服务的 model ID。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>部署并启动服务。\n首次部署并启动 Coze Studio 需要拉取镜像、构建本地镜像，可能耗时较久，请耐心等待。部署过程中，你会看到以下日志信息。如果看到提示 \"Container coze-server Started\"，表示 Coze Studio 服务已成功启动。</p>\n<div class=\"language-Bash\" data-ext=\"Bash\" data-title=\"Bash\"><pre class=\"language-Bash\"><code># 启动服务\ncd docker\ncp .env.example .env\ndocker compose --profile '*' up -d\n</code></pre></div></li>\n</ol>\n<p>注意：若本地已有SQL服务运行，可能会导致端口占用</p>\n<ol start=\"4\">\n<li>访问 Coze Studio。\n打开浏览器，访问 <code>http://localhost:8888</code>，即可进入 Coze Studio 的 Web 界面。</li>\n</ol>\n<p>项目中，部署使用了Google的Gemini免费API</p>\n",
      "date_published": "2025-07-26T00:00:00.000Z",
      "date_modified": "2025-07-26T05:09:29.000Z",
      "authors": [
        {
          "name": "Buterr"
        }
      ],
      "tags": [
        "技术实践"
      ]
    },
    {
      "title": "📦 数码产品进销存管理系统实践",
      "url": "https://newzone.top/projects/Warehouse.html",
      "id": "https://newzone.top/projects/Warehouse.html",
      "summary": "🧭 一、项目背景 在数码产品零售行业中，商品种类繁多、库存流转频繁、人工记录易错，管理难度极大。作为一家线下零售商，传统的手工管理方式已经难以满足日常运营的效率与准确性要求。因此，本项目旨在开发一套集采购、销售、库存管理于一体的进销存系统（WMS），实现企业信息化转型，提升运营效率。 🏗️ 二、系统目标与核心设计理念 系统目标明确： 覆盖进销存全流...",
      "content_html": "",
      "date_published": "2025-05-19T00:00:00.000Z",
      "date_modified": "2025-07-26T05:09:29.000Z",
      "authors": [
        {
          "name": "Buterr"
        }
      ],
      "tags": [
        "学习笔记"
      ]
    },
    {
      "title": "Redis（Remote Dictionary Server）",
      "url": "https://newzone.top/tools/redis.html",
      "id": "https://newzone.top/tools/redis.html",
      "summary": "Redis（Remote Dictionary Server） Redis是一个开源的内存数据库，遵守 BSD 协议，它提供了一个高性能的键值（key-value）存储系统，常用于缓存、消息队列、会话存储等应用场景。通常用于处理高并发操作 一、为什么选择 Redis？ 相比传统数据库或文件系统，Redis 有以下优势： 🚀 超快的访问速度：所有数据存...",
      "content_html": "\n<blockquote>\n<p>Redis是一个开源的内存数据库，遵守 BSD 协议，它提供了一个高性能的键值（key-value）存储系统，常用于缓存、消息队列、会话存储等应用场景。通常用于处理高并发操作</p>\n</blockquote>\n<h2>一、为什么选择 Redis？</h2>\n<p>相比传统数据库或文件系统，Redis 有以下优势：</p>\n<ul>\n<li>🚀 <strong>超快的访问速度</strong>：所有数据存储于内存中，读写速度可达十万级 QPS。</li>\n<li>📦 <strong>丰富的数据结构</strong>：支持字符串、列表、集合、有序集合、哈希等多种结构。</li>\n<li>💾 <strong>支持持久化</strong>：通过 RDB、AOF 两种方式将内存快照保存到磁盘。</li>\n<li>📡 <strong>内置高可用机制</strong>：支持主从复制、哨兵、集群部署。</li>\n<li>🧠 <strong>广泛应用场景</strong>：从缓存到排行榜、分布式锁等，都能胜任。</li>\n</ul>\n",
      "date_published": "2025-07-10T14:53:13.000Z",
      "date_modified": "2025-07-10T14:53:13.000Z",
      "authors": [],
      "tags": []
    }
  ]
}